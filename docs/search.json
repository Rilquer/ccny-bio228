[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "labs/lab7-comm_eco/lab7.html",
    "href": "labs/lab7-comm_eco/lab7.html",
    "title": "Lab 7 - Community Ecology",
    "section": "",
    "text": "Cleaning data utilizing the tidyverse package\n\n\n\ntidyverse"
  },
  {
    "objectID": "labs/lab7-comm_eco/lab7.html#community-ecology-of-pokémon-go",
    "href": "labs/lab7-comm_eco/lab7.html#community-ecology-of-pokémon-go",
    "title": "Lab 7 - Community Ecology",
    "section": "Community Ecology of Pokémon Go",
    "text": "Community Ecology of Pokémon Go\nCommunity ecology seeks to: 1) document patterns in communities; and 2) understand the processes that cause those patterns. In ecology, “communities” are regarded as groups of interacting species. In order to study communities a scientist must first characterize them: How many species are there? Which species are common and which are rare? Are some species “patchy” in their distribution where they are common in one small area and rare elsewhere?\nAgain…Why Pokémon?\nMany aspects of the smart-phone game Pokémon Go mimic real properties of organisms and communities.\n\n“Species” of Pokémon vary in abundance in space and time. Pokémon species can be common one week but rare the next week. Similarly, some Pokémon species are abundant in one particular area but rare elsewhere. This imitates real organisms in nature. For example, many plant-feeding insects are only found near the host plants that they eat as larvae. After they emerge as adults, the insects may live only a few days or weeks while they find a mate, lay eggs, then die.\nSome species of Pokémon are (usually) endemic to particular geographic regions. For example, Kangaskhan, which looks like a horned kangaroo, is only found in Australasia. Tauros, which resembles a three-tailed bison, is only found in the United States. Corsola resembles coral and is found world-wide, but only at the tropical and subtropical latitudes where hard corals can grow.\nOccasionally, Pokémon show habitat preferences. For example, water type Pokémon are encountered more frequently along waterways, and electric type Pokémon are supposedly more common near power substations. Perhaps it’s no accident that Rattatas (which look like rats) are incredibly common everywhere in New York City.\nWithin a species, individuals vary in height, weight, combat power (CP), and hit points (HP).\nEach individual Pokémon exists in two-dimensional space, and one must “go into the field” (e.g., walk around the neighborhood) in order to observe and catch them.\n\nThus, the ecology of Pokémon Go simulates real biological communities, and we can therefore use Pokémon Go to learn the techniques that real ecologists use to study biological communities in nature.\nMoreover, there are at least two distinct advantages of using Pokémon Go over having students sample species in a real biological community. First, the only specialized equipment needed is a smart phone, which most students already own. No need for insect nets, diameter tapes, or small mammal live traps. Secondly, Pokémon come already identified. Many students lack the experience to identify multiple species of wild birds, trees, or insects. While knowing how to identify organisms is a useful skill, this takes time and patience, and is not the focus of the general principles of community ecology we want you to learn in this activity.\nNote that Pokémon evolution is biologically unrealistic and embodies the misunderstandings that creationists often have (e.g., that an extant species can evolve into another extant species).\n\n1. Sampling species in communities\nIn order to estimate the number of species in a community along with the abundance of each species, it is imperative that samples are standardized. As you will see in subsequent portions of this lab activity, it is essential that the focal community (Pokémon) be sampled in units that are standardized and comparable. If you were to walk around one block in Queens in 15 minutes catching Pokémon, then walk the full length of Broadway in Manhattan over the course of hours (catching Pokémon the whole time), you might conclude without justification that Pokémon are more diverse in Manhattan than in Queens. However, these samples are not comparable because neither time nor distance was standardized.\nIn Lab 1, you were asked to do the following:\nYou will need to sample (capture) Pokémon using the Pokémon Go smartphone app following a standardized sampling protocol.\n\nDownload the Pokémon Go app and create a profile. If you already have a profile, please create a new one so that all members of the course are starting at the same level.\nSelect a street near your home where you feel safe walking with your face mask on. During daylight hours, set a timer on your phone for 10 minutes. As soon as the timer starts, open the app and begin walking at your normal pace in a straight line down the sidewalk of the street or avenue. As you walk, attempt to capture every Pokémon you see, pausing if necessary to avoid leaving any behind. Be careful to avoid walking into traffic or other pedestrians.\nWhen the timer goes off, immediately set another 10-minute timer, walk over one block, and walk back toward your home on a different street or avenue, catching Pokémon the whole way, as you did before. When the timer goes off again, stop.\nWhen you get home, you will need to enter data on your Pokémon into the course database. This only applies to the Pokémon you caught during your timed, 20-minute transect. Open the app, tap the Pokéball icon near the bottom, then the POKEMON icon to the left. Click on the icon in the lower, right-hand corner, and sort by “RECENT” if necessary. Click on each Pokémon and record all relevant data from each into this spreadsheet\nBe careful not to delete any else’s data! In the video linked above where I explain the rationale for the lab, I mention catching 20 Pokémon. Ignore that instruction. The protocol described above is a standardized transect. By following these instructions and standardizing each Pokémon sampling event by limiting it to 20 minutes without retracing the same path, we will be able to conduct a variety of statistics on the data that you collect. Have fun!\n\nThis protocol standardizes sampling time so that we can compare one sample to another. It is unlikely that any two samples will be the same, as there seems to be some degree of chance involved in the appearance of Pokémon. However, when we apply a statistical approach to analyzing the samples, we can draw some general principles. Quadrats (a grid, often 1m2), transects (a path along which samples are collected, often of a standard length), and plots (a large area of standardized size in which a census is taken) are methods of standardizing samples so they can be compared statistically.\n\n\n2. Cleaning the data\nBy this point, each class member will have walked their timed transect and added their data to the course’s datasheet. Everyone has surely tried their best, but whenever data are entered into a spreadsheet or database, there is the possibility of error. The more data points there are and the more people who work on a databasing effort, the higher the possibility of errors. It is very possible that we will look at our dataset and find different spelling for the same Pokémon species. For instance, we can look at our dataset and find the names “Rattata”, “ratata” or “ Ratatta”; we can easily see that the last two are misspellings of the first, correct name. Additionally, the second name starts with a lower-case r instead of upper-case. Depending on the programs we use later on to analyze our data, these different spelling will not be recognized as the same entity and will be treated as three different Pokémon species, which would be incorrect. Since characterizing our community depends on correctly identifying and counting the individuals we collected, some data cleaning is necessary before we move to analysis.\nData cleaning can be a time-consuming step. Here, we will use the skills we acquired in the previous lab and use some functions in the tidyverse package to clean our dataset within the R environment. Although you will work in small groups for this exercise, each person should do all of the activities themselves, but please ask your classmates for help if you get stuck. If you’re all stumped, be sure to ask your lab instructor.\n\n2.1 Downloading and importing the dataset\nFirst things first: download the file course’s datashet with the Pokémon dataset. On Google Sheets, make sure you are on the Data tab, then navigate to File &gt; Download &gt; Comma Separated Values (.csv). Create a folder in your computer named “Lab 7” to store this file. Name the file pokemon_dataset.csv.\nWe will also need the data in the second tab of the datasheet, named Pokémon_List. That tab contains a list of all Pokémon species currently available in GO along with their type(s). Click on that tab and follow the same steps above to download the CSV file to same folder you created. Name this new file pokemon_list.csv.\nNow, let’s move to RStudio and start cleaning our dataset. At this point, we will create a new R project for this lab, as we will do for every future lab session. Creating a project is a good practice in R because it keeps your files and analyses for each lab organized, avoiding mixing up different R scritps, different input files and, most importantly, different versions of the same dataset. It also allows for reproducibility, meaning you will be able to better follow the lab again in a future time. To create a project, navigate to the top left of the screen and go to File &gt; New Project. In the next window, select the option Existing Directory and navigate to the location on your computer of the folder you just created, containing the the two CSV files we will need for this lab. Click on Create Project.\nAnother good practice in R is to always create a new script to store and keep track of all the code you have used in a project. Just typing code in the console means it will be very hard to look back through what you did after you have done a lot. In RStudio, go to File &gt; New File &gt; R Script. This will open an empty text editor within R, named Untitled1. This file is not saved, so we will go ahead and save it by goint to File &gt; Save. Choose the same folder we have been using so far and name the file “Lab 7”.\nNow we can start writing our code in the script and running it step by step by pressing Cmnd + Enter (Mac) or Ctrl + Enter (Windows/Linux). Start by loading the tidyverse package using the library function.\n\nlibrary(tidyverse)\n\nThen read the CSV file with the Pokémon data using the read_csv() function. We’ll store it to an object called pokemon_dataset.\n\npokemon_dataset &lt;- read_csv(\"pokemon_dataset.csv\")\n\nWe can call this object to take a quick look at the data…\n\npokemon_dataset\n\n# A tibble: 797 × 12\n   section   emplid borough  weather pokemon_name combat_power_CP hit_points_HP\n   &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;                   &lt;dbl&gt;\n 1 1EG     13155987 Brooklyn Rainy   Joltik       42                         23\n 2 1EG     13155987 Brooklyn Rainy   Stufful      242                        64\n 3 1EG     13155987 Brooklyn Rainy   Seedot       10                         11\n 4 1EG     13155987 Brooklyn Rainy   Voltorb      86                         32\n 5 1EG     13155987 Brooklyn Rainy   Tentacool    187                        44\n 6 1EG     13155987 Brooklyn Rainy   Machop       290                        73\n 7 1EG     13155987 Brooklyn Rainy   Dedenne      279                        56\n 8 1EG     13155987 Brooklyn Rainy   Inkay        11                         14\n 9 1EG     13155987 Brooklyn Rainy   Makuhita     116                        57\n10 1EG     13155987 Brooklyn Rainy   Ekans        239                        50\n# ℹ 787 more rows\n# ℹ 5 more variables: weight_kg &lt;chr&gt;, type_1 &lt;chr&gt;, type_2 &lt;chr&gt;,\n#   height_m &lt;dbl&gt;, location_caught &lt;chr&gt;\n\n\n…and we can use the function glimpse() to look at what columns exist in this dataset.\n\nglimpse(pokemon_dataset)\n\nRows: 797\nColumns: 12\n$ section         &lt;chr&gt; \"1EG\", \"1EG\", \"1EG\", \"1EG\", \"1EG\", \"1EG\", \"1EG\", \"1EG\"…\n$ emplid          &lt;dbl&gt; 13155987, 13155987, 13155987, 13155987, 13155987, 1315…\n$ borough         &lt;chr&gt; \"Brooklyn\", \"Brooklyn\", \"Brooklyn\", \"Brooklyn\", \"Brook…\n$ weather         &lt;chr&gt; \"Rainy\", \"Rainy\", \"Rainy\", \"Rainy\", \"Rainy\", \"Rainy\", …\n$ pokemon_name    &lt;chr&gt; \"Joltik\", \"Stufful\", \"Seedot\", \"Voltorb\", \"Tentacool\",…\n$ combat_power_CP &lt;chr&gt; \"42\", \"242\", \"10\", \"86\", \"187\", \"290\", \"279\", \"11\", \"1…\n$ hit_points_HP   &lt;dbl&gt; 23, 64, 11, 32, 44, 73, 56, 14, 57, 50, 34, 34, 19, 30…\n$ weight_kg       &lt;chr&gt; \"0.23\", \"6.25\", \"4.3.\", \"13.69\", \"49.67\", \"22.04\", \"2.…\n$ type_1          &lt;chr&gt; \"Bug\", \"Normal\", \"Grass\", \"Grass\", \"Water\", \"Fighting\"…\n$ type_2          &lt;chr&gt; \"Electric\", \"Fighting\", \"N/A\", \"Grass\", \"Poison\", \"N/A…\n$ height_m        &lt;dbl&gt; 0.08, 0.47, 0.54, 0.50, 0.89, 0.86, 0.19, 0.40, 1.00, …\n$ location_caught &lt;chr&gt; \"Brooklyn, NY, USA\", \"Brooklyn, NY, USA\", \"Brooklyn, N…\n\n\n\nQuestion: how many Pokemon individuals are recorded in this dataset?\n\n\n\n2.2 Correcting letter case\nWe can take a quick look at the list of Pokemon names we have here to visualize any possible errors. A fast way to do this is using the function unique(), which will return a list of all the values in a vector, with each individual values showing up just once (i.e, removing duplicates). This is a quick way of checking what names R is interpreting to be different entities. We can then use the function unique() around the column that has all Pokemon names. To make our visualization easier, we can further sort that list of unique names in alphabetic order (instead of the order they appear in the dataset). This way, any misspellings will be grouped together. We will use the function sort() for that goal, wrapping it around the function unique()\n\nsort(unique(pokemon_dataset$pokemon_name))\n\n  [1] \"abra\"        \"Abra\"        \"Aipom\"       \"Ampharos\"    \"Anorith\"    \n  [6] \"archen\"      \"Aron\"        \"Barboach\"    \"Bellsprout\"  \"bidoof\"     \n [11] \"Bidoof\"      \"Blitzle\"     \"Bouffalant\"  \"Bronzor\"     \"Bulbasaur\"  \n [16] \"Bulbasur\"    \"Buneary\"     \"Bunnelby\"    \"Burmy\"       \"Cacnea\"     \n [21] \"Carvanha\"    \"Castform\"    \"charmander\"  \"Charmander\"  \"Chespin\"    \n [26] \"Chikorita\"   \"Chinchou\"    \"combee\"      \"Combee\"      \"Cosmog\"     \n [31] \"Cottonee\"    \"Croagunk\"    \"Croconaw\"    \"Cubone\"      \"Cyndaquil\"  \n [36] \"Dedenne\"     \"Deerling\"    \"Dewpider\"    \"Diglett\"     \"Ditto\"      \n [41] \"Doduo\"       \"Drifblim\"    \"Drifloon\"    \"Drilbur\"     \"Drownzee\"   \n [46] \"Drowsy\"      \"drowzee\"     \"Drowzee\"     \"Ducklett\"    \"Dunsparce\"  \n [51] \"Duskull\"     \"Dweeble\"     \"Eevee\"       \"Ekans\"       \"Eknas\"      \n [56] \"Electabuzz\"  \"Electrike\"   \"elgyem\"      \"Elgyem\"      \"evee\"       \n [61] \"Fearow\"      \"Flaaffy\"     \"Fletchinder\" \"Fletching\"   \"Fletchling\" \n [66] \"Flethchling\" \"Foongus\"     \"Froakie\"     \"Geodude\"     \"Girafarig\"  \n [71] \"glameow\"     \"Glameow\"     \"Gligar\"      \"Goldeen\"     \"Gothia\"     \n [76] \"gothita\"     \"Gothita\"     \"Grimer\"      \"Grotle\"      \"Grovyle\"    \n [81] \"Growlithe\"   \"Haunter\"     \"Helioptile\"  \"Hippopotas\"  \"Hitmonchan\" \n [86] \"Hitmontop\"   \"Hoothoot\"    \"hoppip\"      \"Hoppip\"      \"Horsea\"     \n [91] \"Inkay\"       \"Jigglypuff\"  \"Jolteon\"     \"Joltik\"      \"Kadabra\"    \n [96] \"Kakuna\"      \"Karrablast\"  \"kirlia\"      \"Kirlia\"      \"Koffing\"    \n[101] \"Koffling\"    \"krabby\"      \"Krabby\"      \"Kricketot\"   \"Lairon\"     \n[106] \"Lanturn\"     \"Larvitar\"    \"Ledian\"      \"Ledyba\"      \"Lileep\"     \n[111] \"Lillipup\"    \"Linoone\"     \"Litwick\"     \"Lotad\"       \"Lunatone\"   \n[116] \"Machop\"      \"Magikarp\"    \"Magnemite\"   \"Makuhita\"    \"Mareep\"     \n[121] \"Maril\"       \"Meditite\"    \"Meowth\"      \"Miltank\"     \"Minccino\"   \n[126] \"Mudkip\"      \"Munna\"       \"natu\"        \"Natu\"        \"Nidoran\"    \n[131] \"Numel\"       \"Oddish\"      \"Panpour\"     \"Petilil\"     \"Phanpy\"     \n[136] \"Pidgeotto\"   \"Pidove\"      \"Pikachu\"     \"Pikipek\"     \"Pinsir\"     \n[141] \"Plusle\"      \"Popplio\"     \"Porygon\"     \"Prinplup\"    \"ralts\"      \n[146] \"Ralts\"       \"Rhyhorn\"     \"Roggenrola\"  \"Sandshrew\"   \"Sandslash\"  \n[151] \"Sceptile\"    \"Scyther\"     \"Seadra\"      \"Seaking\"     \"Seedot\"     \n[156] \"Sentret\"     \"Seviper\"     \"Sewaddle\"    \"Sewadle\"     \"Sharpedo\"   \n[161] \"Shelmet\"     \"Shiftry\"     \"Shinx\"       \"Shroomish\"   \"Skitty\"     \n[166] \"Skorupi\"     \"Slowpoke\"    \"Smeargle\"    \"Snubbul\"     \"snubbull\"   \n[171] \"Snubbull\"    \"Solosis\"     \"Solrock\"     \"Spearow\"     \"spoink\"     \n[176] \"Spoink\"      \"Squirtle\"    \"Stantler\"    \"Staravia\"    \"Starly\"     \n[181] \"Staryu\"      \"Stufful\"     \"Stunfisk\"    \"Stunky\"      \"sudowood\"   \n[186] \"sunkern\"     \"Sunkern\"     \"Swablu\"      \"Swinub\"      \"Tangela\"    \n[191] \"Tauros\"      \"Tentacool\"   \"Throh\"       \"Torchic\"     \"Totodile\"   \n[196] \"Trapinch\"    \"Turtwig\"     \"tympole\"     \"Tynamo\"      \"Tyrunt\"     \n[201] \"Voltorb\"     \"Vulpix\"      \"Wailmer\"     \"Weepinbell\"  \"Weepindell\" \n[206] \"Whismur\"     \"Wimpod\"      \"Winggull\"    \"Wingull\"     \"Woobat\"     \n[211] \"Wooper\"      \"Yanma\"       \"Yungoos\"     \"zigzagoon\"   \"Zigzagoon\"  \n\n\n\nQuestion: what misspellings can you spot from this list?\n\nThe main data entry errors we find in our dataset are 1) having the same entity spelled with lower and upper case initial letters in different instances; 2) misspellings of the correct name. We can solve the first of these problems by simply choosing to convert all first letters to either upper case or lower case. Any names that differ only on the case of the first letter will then collapse into one of the two options and be treated as the same entity from now on. There is one useful function in tidyverse that can be used for that purpose: str_to_title(). This function will convert the first letter of all words in a vector to upper case. We can then use that function with mutate() to modify the contents of the column pokemon_name in our dataset.\nRemember: we first call our object and pipe it using %&gt;% into mutate(), which will then modify the column inside that object. All this is saved back into the object pokemon_dataset.\n\npokemon_dataset &lt;- pokemon_dataset %&gt;% mutate(pokemon_name = str_to_title(pokemon_name))\n\nNow we can use sort() and unique() again for a quick look and see if the errors were gone:\n\nsort(unique(pokemon_dataset$pokemon_name))\n\n  [1] \"Abra\"        \"Aipom\"       \"Ampharos\"    \"Anorith\"     \"Archen\"     \n  [6] \"Aron\"        \"Barboach\"    \"Bellsprout\"  \"Bidoof\"      \"Blitzle\"    \n [11] \"Bouffalant\"  \"Bronzor\"     \"Bulbasaur\"   \"Bulbasur\"    \"Buneary\"    \n [16] \"Bunnelby\"    \"Burmy\"       \"Cacnea\"      \"Carvanha\"    \"Castform\"   \n [21] \"Charmander\"  \"Chespin\"     \"Chikorita\"   \"Chinchou\"    \"Combee\"     \n [26] \"Cosmog\"      \"Cottonee\"    \"Croagunk\"    \"Croconaw\"    \"Cubone\"     \n [31] \"Cyndaquil\"   \"Dedenne\"     \"Deerling\"    \"Dewpider\"    \"Diglett\"    \n [36] \"Ditto\"       \"Doduo\"       \"Drifblim\"    \"Drifloon\"    \"Drilbur\"    \n [41] \"Drownzee\"    \"Drowsy\"      \"Drowzee\"     \"Ducklett\"    \"Dunsparce\"  \n [46] \"Duskull\"     \"Dweeble\"     \"Eevee\"       \"Ekans\"       \"Eknas\"      \n [51] \"Electabuzz\"  \"Electrike\"   \"Elgyem\"      \"Evee\"        \"Fearow\"     \n [56] \"Flaaffy\"     \"Fletchinder\" \"Fletching\"   \"Fletchling\"  \"Flethchling\"\n [61] \"Foongus\"     \"Froakie\"     \"Geodude\"     \"Girafarig\"   \"Glameow\"    \n [66] \"Gligar\"      \"Goldeen\"     \"Gothia\"      \"Gothita\"     \"Grimer\"     \n [71] \"Grotle\"      \"Grovyle\"     \"Growlithe\"   \"Haunter\"     \"Helioptile\" \n [76] \"Hippopotas\"  \"Hitmonchan\"  \"Hitmontop\"   \"Hoothoot\"    \"Hoppip\"     \n [81] \"Horsea\"      \"Inkay\"       \"Jigglypuff\"  \"Jolteon\"     \"Joltik\"     \n [86] \"Kadabra\"     \"Kakuna\"      \"Karrablast\"  \"Kirlia\"      \"Koffing\"    \n [91] \"Koffling\"    \"Krabby\"      \"Kricketot\"   \"Lairon\"      \"Lanturn\"    \n [96] \"Larvitar\"    \"Ledian\"      \"Ledyba\"      \"Lileep\"      \"Lillipup\"   \n[101] \"Linoone\"     \"Litwick\"     \"Lotad\"       \"Lunatone\"    \"Machop\"     \n[106] \"Magikarp\"    \"Magnemite\"   \"Makuhita\"    \"Mareep\"      \"Maril\"      \n[111] \"Meditite\"    \"Meowth\"      \"Miltank\"     \"Minccino\"    \"Mudkip\"     \n[116] \"Munna\"       \"Natu\"        \"Nidoran\"     \"Numel\"       \"Oddish\"     \n[121] \"Panpour\"     \"Petilil\"     \"Phanpy\"      \"Pidgeotto\"   \"Pidove\"     \n[126] \"Pikachu\"     \"Pikipek\"     \"Pinsir\"      \"Plusle\"      \"Popplio\"    \n[131] \"Porygon\"     \"Prinplup\"    \"Ralts\"       \"Rhyhorn\"     \"Roggenrola\" \n[136] \"Sandshrew\"   \"Sandslash\"   \"Sceptile\"    \"Scyther\"     \"Seadra\"     \n[141] \"Seaking\"     \"Seedot\"      \"Sentret\"     \"Seviper\"     \"Sewaddle\"   \n[146] \"Sewadle\"     \"Sharpedo\"    \"Shelmet\"     \"Shiftry\"     \"Shinx\"      \n[151] \"Shroomish\"   \"Skitty\"      \"Skorupi\"     \"Slowpoke\"    \"Smeargle\"   \n[156] \"Snubbul\"     \"Snubbull\"    \"Solosis\"     \"Solrock\"     \"Spearow\"    \n[161] \"Spoink\"      \"Squirtle\"    \"Stantler\"    \"Staravia\"    \"Starly\"     \n[166] \"Staryu\"      \"Stufful\"     \"Stunfisk\"    \"Stunky\"      \"Sudowood\"   \n[171] \"Sunkern\"     \"Swablu\"      \"Swinub\"      \"Tangela\"     \"Tauros\"     \n[176] \"Tentacool\"   \"Throh\"       \"Torchic\"     \"Totodile\"    \"Trapinch\"   \n[181] \"Turtwig\"     \"Tympole\"     \"Tynamo\"      \"Tyrunt\"      \"Voltorb\"    \n[186] \"Vulpix\"      \"Wailmer\"     \"Weepinbell\"  \"Weepindell\"  \"Whismur\"    \n[191] \"Wimpod\"      \"Winggull\"    \"Wingull\"     \"Woobat\"      \"Wooper\"     \n[196] \"Yanma\"       \"Yungoos\"     \"Zigzagoon\"  \n\n\n\n\n2.3 Identifying mispellings with logical operators\nFrom the previous code, we can see some of our errors are gone, but we still have some misspelling that make R identify the same name as two different names. To correct that, we need to 1) find out what names in our dataset are misspelled; 2) identify the correct misspelling; 3) replace the wrong misspelling with the correct misspelling. We briefly went over a similar exercise in the previous lab, where we used mutate() to correct a misspelling for the name of a Borough. Here, we will learn a way to provide a list of all misspellings and their correct counterparts so R can automatically correct all errors in our dataset.\nFirst, let’s find out what names are mispelled. We can do that by comparing the names on our dataset to the names in the official list of Pokémon species in Pokémon GO, which we also downloaded as a file. We will ask R: what names in our dataset ARE NOT present in the official list? To do so, we first import the official list:\n\npokemon_list &lt;- read_csv('pokemon_list.csv')\n\nRows: 1084 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): F, Pokemon, type_1, type_2\ndbl (1): Ndex\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo ask our question, we will need to utilize two logical operators: %in% (the IN operator) and ! (the NOT operator). The %in% operator is used between two vectors, e.g., A %in% B, and is used to ask R: “What elements of A are present in B?”. The result returned by R is a vector of logical values (TRUE or FALSE) informing whether a specific element in A is present somewhere in B.\nWe can exemplify the use of this operator by first asking “what names in our dataset are in the official list?”. We can do so by typing:\n\npokemon_dataset$pokemon_name %in% pokemon_list$Pokemon\n\n  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [13]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n [49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [61]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [85]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [97]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[121]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[145]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[157]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[169]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[181]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[193]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[205]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[217]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n[229]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[241]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[253]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[265]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[277]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n[289]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[301]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[313]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[325]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[337]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[349]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n[361] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[373]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[385]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n[397]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[409]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[421]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[433]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[445]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[457]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[469]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[481]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[493]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[505]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[517]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[529]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[541]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[553]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[565]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[577]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[589]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[601]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[613]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[625]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[637]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[649]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n[661]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[673]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[685]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[697]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[709]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[721]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[733]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[745]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[757]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[769]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[781]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[793]  TRUE  TRUE  TRUE FALSE  TRUE\n\n\nYou can see this returns a long list of TRUE and FALSE values. Most of them are TRUE meaning most of our names are correct. Any instances of FALSE represent the names that are not in the official list and, we assume, misspelled.\nWe can then use the ! operator to ask the opposite of the question above: “what names in our dataset ARE NOT in the official list?”\n\n!(pokemon_dataset$pokemon_name %in% pokemon_list$Pokemon)\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n[169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n[229] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n[241] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[253] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[265] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[277] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n[289] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[301] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[313] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[325] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[337] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[349] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n[361]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[373] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[385] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n[397] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[409] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n[421] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[433] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[445] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[457] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[469] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[481] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[493] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[505] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[517] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[529] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[541] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[553] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[565] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[577] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n[589] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[601] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n[613] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[625] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[637] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[649] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n[661] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[673] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[685] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[697] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[709] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[721] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[733] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[745] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[757] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[769] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[781] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[793] FALSE FALSE FALSE  TRUE FALSE\n\n\nYou can see now that most of the values returning are FALSE with a few values being TRUE. This is essentially the opposite of the vector from the previous code: now the TRUE values represent the names that ARE NOT in the official list (i.e., they represent the names that match the condition you asked for).\nTo better visualize what names are matching our condition, we can use the function which(). This function will return the positions in any vector that translate to the logical value TRUE. If we apply this to the code above, we will be presented with a vector of numbers indicating what elements correspond to TRUE. We will save this vector of numbers as pos (for positions).\n\npos &lt;- which(!(pokemon_dataset$pokemon_name %in% pokemon_list$Pokemon))\n\nOkay, we are getting closer. Now we have a list of the positions in our dataset where names are misspelled (i.e., they don’t match the official list). We can use these positions to check the actual names by calling the actual column where the names are stored; but, instead of calling the whole vector, we want to filter the vector based on these positions, i.e., based on the elements that we know to be misspelled. We can do so by using brackets [] to subset a vector. For instance, if pokemon_dataset$pokemon_name is the vector of names in our dataset (i.e., essentially the column where our names are), we could use pokemon_dataset$pokemon_name[1] to retrieve the first element of that vector (which is the name in the first row). So, if we type…\n\npokemon_dataset$pokemon_name[pos]\n\n [1] \"Nidoran\"     \"Sewadle\"     \"Winggull\"    \"Weepindell\"  \"Nidoran\"    \n [6] \"Flethchling\" \"Dweeble\"     \"Koffling\"    \"Drowsy\"      \"Gothia\"     \n[11] \"Sudowood\"    \"Sudowood\"    \"Sudowood\"    \"Fletching\"   \"Bulbasur\"   \n[16] \"Drownzee\"    \"Evee\"        \"Maril\"       \"Snubbul\"     \"Maril\"      \n[21] \"Eknas\"      \n\n\n…we are presented with the names that do not match the official list.\n\n\n2.4 Correcting mispellings with case_when()\n\nChecking the correct spelling of the names\n\n\nCreate vectors of the wrong spelling\n\n\nUse case_when\n\n\nAsk them to do the same for Boroughs\n\n\n\nCalculating Diversity indices"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto-website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  }
]